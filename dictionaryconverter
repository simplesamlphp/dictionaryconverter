#!/usr/bin/env python3

import datetime
import json
import os.path
import argparse
from pprint import pprint
import sys
from collections import Counter, namedtuple

from babel.messages.catalog import Catalog
from babel.messages import pofile
from babel.core import UnknownLocaleError
from babel.util import LOCALTZ

Stat = namedtuple('Stat', ['count', 'percentage'])

DEFAULT_CATALOG_HEADERS = {
    'header_comment': (u''),
    'project': u'SimpleSAMLphp',
    'version': '1.15',
    'msgid_bugs_address': 'simplesamlphp-translation@googlegroups.com',
    'language_team': '',
    'last_translator': '',
}

LOCALENAME_MAP = {
    'pt-br': 'pt_BR',
    'zh-tw': 'zh_TW',
    'no': 'nb',
}

DEFAULT_LOCALEDIR = 'locales'
MODULEDIR = 'modules'


def make_parser():
    parser = argparse.ArgumentParser(description='Convert SSP translation dictionaries into gettext .po-files')
    parser.add_argument('-D', '--domain', help='Alternative domain name to use')
    parser.add_argument('-l', '--localedir', help='Root of the tree where to save the .po-files. Default: "locales"')
    parser.add_argument('-m', '--module', help='The name of a single module')
    parser.add_argument('-H', '--header', action='append', help='One or more headers in the format "key=value" to build up the mime-block in the first entry. For instance: -H "version=2"')
    parser.add_argument('-s', '--stringify', action='store_true', help='Convert SimpleSAMLphp tags to gettext-style strings')
    parser.add_argument('-v', '--verbose', action='store_true', help='Be verbose')

    subparsers = parser.add_subparsers(help='commands', dest='command')

    convert_parser = subparsers.add_parser('convert', help='Convert one dictionary')
    convert_parser.add_argument('dictionary')

    merge_parser = subparsers.add_parser('merge', help='Merge dictionaries')
    merge_parser_group = merge_parser.add_mutually_exclusive_group()
    merge_parser_group.add_argument('-e', '--exclude', action='append', help='Merge all dictionaries expect the EXCLUDEd ones')
    merge_parser_group.add_argument('-i', '--include', action='append', help='Merge only the dictionaries that are INCLUDEd')

    extract_parser = subparsers.add_parser('extract', help='Extract tags to other domains')
    extract_parser.add_argument('dictionary')
    extract_parser.add_argument('tags', action='append', help='TAGs to extract')

    stats_parser = subparsers.add_parser('stats', help='Show statistics')
    stats_parser.add_argument('-c', '--csv', action='store_true', help='Use CSV-format. Separator is a comma.')

    return parser


def prefix_modulepath(path, module=None):
    if module is None:
        return path
    return os.path.join(MODULEDIR, module, path)


def create_namespace(dictionaryname, modulename=None):
    if modulename is None:
        return dictionaryname
    return u'{}:{}'.format(modulename, dictionaryname)


def add_namespace_to_msgid(msgid, namespace):
    return u'{%s:%s}' % (namespace, msgid)


def get_dictionary(path, name, namespace=None):
    definitionfile = '%s.definition.json' % name
    translationfile = '%s.translation.json' % name
    with open(os.path.join(path, definitionfile)) as DF:
        definitions = json.load(DF)
    assert definitions, 'Definitions for %s not found' % name
    with open(os.path.join(path, translationfile)) as TF:
        translations = json.load(TF)
    assert translations, 'Translations for %s not found' % name

    merged_dictionary = definitions.copy()
    for msgid, languages in merged_dictionary.items():
        if msgid in translations:
            languages.update(translations[msgid])

    result_dictionary = merged_dictionary
    if namespace:
        result_dictionary = {}
        for msgid, translations in merged_dictionary.items():
            msgid = add_namespace_to_msgid(msgid, namespace)
            result_dictionary[msgid] = translations

    return result_dictionary


def merge_dictionaries(*dictionaries):
    result_dictionary = {}
    for dictionary in dictionaries:
        result_dictionary.update(dictionary)
    return result_dictionary


def merge_dictionaries_in_dir(path, module=None, exclude=None, include=None, verbose=False):
    assert not (exclude and include)
    dictionarynames = set()
    for fname in os.listdir(path):
        if not fname.endswith('.definition.json'):
            continue
        dname = fname.split('.', 1)[0]
        dictionarynames.add(dname)

    if include:
        include = set(include)
        missing = include - dictionarynames
        if verbose:
            print('Dictionaries not found: {}'.format(', '.join(missing)))
        dictionarynames = include & dictionarynames

    if exclude:
        dictionarynames = dictionarynames.difference(exclude)

    dictionaries = []
    for dname in dictionarynames:
        namespace = create_namespace(dname, module)
        dictionary = get_dictionary(path, dname, namespace=namespace)
        dictionaries.append(dictionary)

    result_dictionary = merge_dictionaries(*dictionaries)
    return result_dictionary


def extract_tag_from_dictionary(dictionary, *tags):
    result_dictionary = {}
    dictionary_tags = set(dictionary.keys())
    for tag in tags:
        if tag in dictionary_tags:
            result_dictionary[tag] = dictionary[tag]
    return result_dictionary


def create_pocatalog_for_language(locale, **kwargs):
    headers = DEFAULT_CATALOG_HEADERS.copy()
    headers.update(kwargs)
    headers['locale'] = locale
    catalog = Catalog(**headers)
    return catalog


def get_pocatalog_path(locale, domain='messages', localedir='./locales', verbose=False):
    filename = '%s.po' % domain
    location = os.path.join(localedir, locale, 'LC_MESSAGES')
    # Create locales-structure if missing
    try:
        if verbose:
            print('Making/checking for directory "{}"'.format(location))
        os.makedirs(location)
    except FileExistsError:
        if not os.path.isdir(location):
            print('"{}" exists but is not a directory'.format(location))
            raise
    except OSError as e:
        print('Error with "{}": {}'.format(location, e))
        raise
    return os.path.join(location, filename)


def get_pocatalog_for_language(locale, domain='messages', localedir='./locales', verbose=False):
    path = get_pocatalog_path(locale, domain=domain, localedir=localedir, verbose=verbose)
    locale = LOCALENAME_MAP.get(locale, locale)
    if os.path.exists(path):
        if verbose:
            print('Get existing catalog at "{}"'.format(path))
        with open(path, 'rb') as F:
            return pofile.read_po(F, locale=locale, domain=domain, charset='UTF-8')
    if verbose:
        print('Creating catalog at "{}"'.format(path))
    return create_pocatalog_for_language(locale, domain=domain)


def make_podata_from_dictionary(dictionary, domain='messages', localedir='./locales', verbose=False):
    podata = {}
    for msgid, languages in dictionary.items():
        if verbose:
            print('Processing "{}"'.format(msgid))
        for langoid, translation in languages.items():
            if verbose:
                print('PO-ing {}'.format(langoid))
            if langoid not in podata:
                try:
                    podata[langoid] = get_pocatalog_for_language(
                        locale=langoid,
                        domain=domain,
                        localedir=localedir,
                        verbose=verbose,
                    )
                except UnknownLocaleError:
                    print('Locale "{}" unknown to helper library "babel"'.format(langoid))
                    continue
            podata[langoid].add(msgid, string=translation)
    return podata


def update_pocatalog_header(pocatalog, **headers):
    updated_headers = DEFAULT_CATALOG_HEADERS.copy()
    updated_headers.update(headers)
    for key, value in updated_headers.items():
        setattr(pocatalog, key, value)
    pocatalog.revision_date = datetime.datetime.now(LOCALTZ)
    return pocatalog


def write_pofiles(localedir, podata, domain='messages', headers=None, verbose=False):
    if headers is None:
        headers = {}
    filename = '%s.po' % domain
    for langoid, pocatalog in podata.items():
        if verbose:
            print('About to save "{}"'.format(langoid))
        filepath = get_pocatalog_path(langoid, domain=domain, localedir=localedir, verbose=verbose)
        pocatalog = update_pocatalog_header(pocatalog, **headers)
        with open(filepath, 'wb') as F:
            pofile.write_po(F, pocatalog)
            if verbose:
                print('Saved "{}"'.format(filepath))


def build_headers(headerlist):
    headers = DEFAULT_CATALOG_HEADERS.copy()
    for headeritem in headerlist:
        key, value = headeritem.split('=')
        key = key.strip().lower()
        value = value.strip()
        headers[key] = value
    return headers


def convert_tags_to_strings(dictionary):
    for tag, languages in list(dictionary.items()):
        string = languages.get('en', None)
        if not string:
            continue
        dictionary[string] = languages
    return dictionary


def build_stats_for_dictionary(dictionary):
    num_msgids = len(dictionary)
    msgid_per_lang = Counter()
    for translations in dictionary.values():
        msgid_per_lang.update(translations.keys())
    result = {}
    for lang, count in msgid_per_lang.items():
        result[lang] = Stat(count, count/num_msgids*100)
    return result


def pprint_stats(stats, prefix='', template=''):
    if not template:
        template = '{prefix}{key}: {percentage}'
    keys = sorted(stats.keys())
    prefix = prefix + ':' if prefix else ''
    for key in keys:
        kwargs = {
            'prefix': prefix,
            'key': key,
            'percentage': stats[key].percentage/100,
            'count': stats[key].count,
        }
        print(template.format(**kwargs))


if __name__ == '__main__':
    parser = make_parser()
    args = parser.parse_args()

    module = args.module or None
    headers = build_headers(args.header or {})
    dictpath = prefix_modulepath('dictionaries', module)
    # Override generated localedir
    if args.localedir:
        localedir = args.localedir
    else:
        localedir = prefix_modulepath(DEFAULT_LOCALEDIR, module)
    if args.domain:
        domain = args.domain
    elif args.module:
        domain = args.module
    else:
        domain = 'messages'
    command = args.command
    verbose = args.verbose
    dictionary = getattr(args, 'dictionary', None)
    namespace = None
    if dictionary:
        namespace = create_namespace(dictionary, module)

    if len(sys.argv) < 2:
        parser.print_help()
        sys.exit(1)

    if command == 'stats':
        d = merge_dictionaries_in_dir(dictpath, module=module or None, verbose=verbose)
        template = ''
        if args.csv:
            template = '{prefix}{key},{percentage:.1%},{count}'
        pprint_stats(build_stats_for_dictionary(d), namespace or module or 'base', template)
        sys.exit(0)
    if command == 'extract':
        domain = 'extracted'
        tags = []
        for tag in args.tags:
            if not ':' in tag:
                tag = add_namespace_to_msgid(tag, namespace)
            tags.append(tag)
        d = get_dictionary(dictpath, dictionary, namespace=namespace)
        d = extract_tag_from_dictionary(d, *tags)
    elif command == 'convert':
        domain = dictionary
        d = get_dictionary(dictpath, dictionary, namespace=namespace)
        if verbose:
            print('Converting "{}@{}"'.format(dictionary, dictpath))
    elif command == 'merge':
        d = merge_dictionaries_in_dir(dictpath, module=module or None, include=args.include or None, exclude = args.exclude or None, verbose=verbose)
    else:
        sys.exit()
    if args.stringify:
        d = convert_tags_to_strings(d)
    podata = make_podata_from_dictionary(d, domain=domain, localedir=localedir, verbose=verbose)
    write_pofiles(localedir, podata, domain=domain, headers=headers, verbose=verbose)
